#the function will calculate the inverse. If it is already cached, the function will return
#"getting cached data" along with the inverse from the cache.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
mat<-matrix(c(2,0,0,4),2,2)
z<-makeCacheMatrix(mat)
cacheSolve(z)
cacheSolve(z)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
#This function returns the inverse of the matrix. If the inverse is not already cached,
#the function will calculate the inverse. If it is already cached, the function will return
#"getting cached data" along with the inverse from the cache.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
mat<-matrix(c(2,0,0,4),2,2)
solve(mat)
z<-makeCacheMatrix(mat)
cacheSolve(z)
cacheSolve(z)
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
}
z<-makeCacheMatrix(mat)
cacheSolve(z)
mat<-matrix(c(2,0,0,4),2,2)
z<-makeCacheMatrix(mat)
cacheSolve(z)
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
z<-makeCacheMatrix(mat)
cacheSolve(z)
cacheSolve(z)
?rnorm
str(split)
?split
str(Rprof())
?RProf
?Rprof
install.packages("xlsx")
install.packages("XML")
install.packages("jsonlite")
install.packages("RMySQL")
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(httr)
ngapp = oauth_app("github", key = "bbc05e9793802671e6f7" ,
secret = 346830d61e0310404a82adc382dc82bdd158428d)
github_token <- oauth2.0_token(oauth_endpoints("github"), ngapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
str(unique)
?unique
con = url(http://biostat.jhsph.edu/~jleek/contact.html)
htmlcode = readLines(con)
htmlcode
con <- url(http://biostat.jhsph.edu/~jleek/contact.html)
con <- url(https://biostat.jhsph.edu/~jleek/contact.html)
htmlcode <- readLines(con)
htmlcode
con <- url(https://biostat.jhsph.edu/~jleek/contact.html)
htmlcode <- readLines(con)
htmlcode
readLines(http://biostat.jhsph.edu/~jleek/contact.html)
readLines(http:/biostat.jhsph.edu/~jleek/contact.html)
readLines(biostat.jhsph.edu/~jleek/contact.html)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode <- readLines(con)
htmlcode
?nchar
nchar(htmlcode[10])
nchar(htmlcode[10, 20, 30, 100])
nchar(htmlcode[20])
nchar(htmlcode[30])
nchar(htmlcode[100])
ff <- read.fwf("noaa.for", header = TRUE)
ff <- x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
names(ff)
sum(ff$V4)
ff <- x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(15, 4, 9, 4, 9, 4, 9, 4, 9))
names(ff)
sum(ff$V4)
ffe <- x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(15, 4, 9, 4, 9, 4, 9, 4, 9))
View(ffe)
sum(ff$V4, na.rm = T)
ffe <- x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(15, 4, 9, 4, 9, 4, 9, 4, 9))
View(ffe)
getwd()
setwd("~/Desktop/Coursera")
dta <- read.csv("q4.csv")
q1 <- strsplit(names(dta), "wgtp")
q1[123]
dta <- read.csv("q44.csv")
dta$USD
dta$USD <- gsub(",","", dta$USD)
View(dta)
mean(dta$USD)
class(dta$USD)
dta$USD <- as.numeric(dta$USD)
mean(dta$USD)
dta <- read.csv("q44.csv")
dta$USD <- gsub(",","", dta$USD)
dta$USD <- as.numeric(dta$USD)
mean(dta$USD[1:191])
dta <- read.csv("q44.csv")
dta$USD <- gsub(",","", dta$USD)
dta$USD <- as.numeric(dta$USD, na.rm = T)
mean(dta$USD[1:191])
mean(dta$USD)
View(dta)
dta <- read.csv("q44.csv")
dta <- dta[1:191, ]
dta$USD <- gsub(",","", dta$USD)
dta$USD <- as.numeric(dta$USD, na.rm = T)
mean(dta$USD)
dta <- read.csv("q44.csv")
dta <- dta[2:191, ]
dta$USD <- gsub(",","", dta$USD)
dta$USD <- as.numeric(dta$USD, na.rm = T)
mean(dta$USD)
grep("^United",Country)
grep("^United", dta$Country)
grep("^United", dta$Economy)
gdp <- read.csv("gdp1.csv", header = T)
edu <- read.csv("edu.csv", header = T)
names(gdp)
names(edu)
colnames(edu)[1] <- "code"
dta <- merge(gdp, edu, by = "code", all = FALSE)
View(dta)
grep("June", dta$Special.Notes)
length(grep("June", dta$Special.Notes))
length(grep("end: June", dta$Special.Notes))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
setwd("~/Desktop/Coursera/UCI HAR Dataset")
xtest <- read.table("X_test.txt")
getwd()
setwd("~/Desktop/Coursera")
setwd("~/Desktop/Coursera/UCI HAR Dataset")
xtest <- read.table("X_test.txt")
setwd("~/Desktop/Coursera/UCI HAR Dataset/test")
xtest <- read.table("X_test.txt")
ytest <- read.table("y_test.txt")
View(ytest)
setwd("~/Desktop/Coursera/UCI HAR Dataset/train")
xtrain <- read.table("X_train.txt")
ytrain <- read.table("y_train.txt")
View(ytrain)
summary(ytrain)
summary(xtrain)
summary(ytest)
library(dplyr)
test <- cbind(xtest, ytest)
View(test)
colnames(test) [562]
train <- cbind(xtrain, ytrain)
View(train)
names(train)
dta <- rbind(test, train)
setwd("~/Desktop/Coursera/UCI HAR Dataset")
feats <- read.table("features.txt")
View(feats)
View(feats)
grep("mean() | std()", feats$V2)
grep("mean()" | "std()", feats$V2)
grep("mean" | "std", feats$V2)
grep("mean | std", feats$V2)
grep(".mean | .std", feats$V2)
grep(".mean", feats$V2)
grep(".mean" | ".std", feats$V2)
grep(".mean"|".std", feats$V2)
grep(".mean|.std", feats$V2)
grep(".mean()|.std()", feats$V2)
meanstd <- grep(".mean()|.std()", feats$V2)
dta <- dta[ , dta[meanstd] & dta[562]]
dta <- dta[ , dta[meanstd & 562]
dta <- dta[ , dta[meanstd]
dta <- dta[ , dta[meanstd]
lljl
dta <- dta[ , dta[meanstd]]
dta <- dta[ , meanstd & 562]
View(dta)
dta1 <- dta[ , meanstd & 562]
dta1 <- dta[ , meanstd]
View(dta1)
list()
?list
meanstd <- list(grep(".mean()|.std()", feats$V2), 562)
feats <- read.table("features.txt")
meanstd <- list(grep(".mean()|.std()", feats$V2), 562)
dta <- dta[ , meanstd]
setwd("~/Desktop/Coursera/UCI HAR Dataset/test")
xtest <- read.table("X_test.txt")
ytest <- read.table("y_test.txt")
test <- cbind(xtest, ytest)
setwd("~/Desktop/Coursera/UCI HAR Dataset/train")
xtrain <- read.table("X_train.txt")
setwd("~/Desktop/Coursera/UCI HAR Dataset/train")
xtrain <- read.table("X_train.txt")
ytrain <- read.table("y_train.txt")
train <- cbind(xtrain, ytrain)
activity <- rbind(ytest, ytrain)
actv <- rbind(ytest, ytrain)
summary(actv)
str(actv)
levels(actv)
actv <- as.factor(actv)
actv <- as.factor(as.numeric(actv))
actv <- as.factor(actv)
actv <- as.vector(actv)
class(actv)
actv <- as.vector(actv)
actv <- as.factor(activ[,1])
actv <- as.factor(actv[,1])
class(activ)
class(actv)
levels(actv)
levels(actv) <- c("walking", "walking_upstairs", "walking_downstairs", "sitting",
"standing", "laying")
length(actv)
dta <- rbind(test, train)
setwd("~/Desktop/Coursera/UCI HAR Dataset")
feats <- read.table("features.txt")
meanstd <- grep(".mean()|.std()", feats$V2)
dta <- dta[ , meanstd]
dta <- cbind(dta, actv)
View(dta)
View(feats)
cnames <- feats[,2]
length(cnames)
cnames <- as.character(cnames)
cnames <- feats[meanstd, 2]
cnames <- as.character(cnames)
colnames(dta) <- cnames
View(activity)
View(dta)
colnames(dta)[80] <- "activity"
View(dta)
View(dta)
?tapply
tapply(dta, dta$activity, mean)
tapply(dta[,1], dta$activity, mean)
tapply(dta[,1:79], dta$activity, mean)
dta2 <- split(dta, dta$activity)
sapply(dta2, mean)
drs <- sapply(dta2, mean)
setwd("~/Desktop/Coursera/UCI HAR Dataset/test")
xtest <- read.table("X_test.txt")
ytest <- read.table("y_test.txt")
subjtest <- read.table("subject_test.txt")
test <- cbind(xtest, ytest, subjtest)
setwd("~/Desktop/Coursera/UCI HAR Dataset/train")
xtrain <- read.table("X_train.txt")
ytrain <- read.table("y_train.txt")
subjtrain <- read.table("subject_train.txt")
train <- cbind(xtrain, ytrain, subjtrain)
dta <- rbind(test, train)
feats <- read.table("features.txt")
setwd("~/Desktop/Coursera/UCI HAR Dataset")
feats <- read.table("features.txt")
View(feats)
meanstd <- grep(".mean()|.std()", feats$V2)
dta <- dta[ , meanstd]
activity <- rbind(ytest, ytrain)
activity <- as.factor(activity[,1])
levels(activity) <- c("walking", "walking_upstairs", "walking_downstairs", "sitting",
"standing", "laying")
subj <- rbind(subjtest, subjtrain)
dta <- cbind(dta, activity, subj)
cnames <- feats[meanstd, 2]
cnames <- as.character(cnames)
colnames(dta) <- cnames
colnames(dta)[80] <- "activity"
colnames(dta)[81] <- "subject"
View(dta)
dta2 <- split(dta, dta$activity)
dta2
drs <- sapply(dta2, mean)
?sapply
drs <- lapply(dta2, mean)
drs <- lapply(dta2, mean, na.rm = T)
class(dta[,22])
class(dta[,20])
class(dta[33,10])
class(dta2)
dta2 <- as.numeric(dta2)
lapply(split(dta, dta$activity), mean)
class(dta)
tapply(dta[,1], dta$activity, mean)
tapply(dta[,1:3], dta$activity, mean)
tapply(dta[,3], dta$activity, mean)
for(i in 1:79){
m <- tapply(dta[,i], dta$activity, mean)
df <- rbind(m ,df)
}
for(i in 1:79){
m[i] <- tapply(dta[,i], dta$activity, mean)
df <- rbind(m ,df)
}
for(i in 1:79){
m[i] <- tapply(dta[,i], dta$activity, mean)
df <- data.frame(m ,df)
}
for(i in 1:79){
m <- tapply(dta[,i], dta$activity, mean)
}
m
for(i in 1:79){
mn[i] <- tapply(dta[,i], dta$activity, mean)
}
-m
m <- NULL
mn[i] <- tapply(dta[,i], dta$activity, mean)
for(i in 1:79){
mn <- tapply(dta[,i], dta$activity, mean)
}
mn
for(i in 1:79){
mn[i] <- tapply(dta[,i], dta$activity, mean)
}
mn
mn <- vector()
mn <- as.numeric(vector())
for(i in 1:79){
mn[i] <- tapply(dta[,i], dta$activity, mean)
}
tapply(dta[,55], dta$activity, mean)
tapply(dta[,52], dta$activity, mean)
tapply(dta[,33], dta$activity, mean)
mn <- list()
for(i in 1:79){
mn[i] <- tapply(dta[,i], dta$activity, mean)
}
mn
mn <- list()
for(i in 1:79){
mn <- tapply(dta[,i], dta$activity, mean)
}
mn
mn <- list()
for(i in 1:79){
mn <- tapply(dta[,i], dta$activity, mean)
}
mn <- list()
for(i in 1:79){
mn[i] <- tapply(dta[,i], dta$activity, mean)
}
mn
tapply(dta[,33], dta$activity, mean)
mn <- list()
for(i in 1:79){
mn[i] <- list(tapply(dta[,i], dta$activity, mean))
}
mn
meansubj <- list()
for(i in 1:79){
meansubj[i] <- list(tapply(dta[,i], dta$subject, mean))
}
meansubj
msdf <- data.frame(meansubj)
View(msdf)
colnames(msdf)
tidy2 <- list(meanactivity, meansubj)
tidy2 <- list(meanactivity, meansubj)
meanactivity
meanactivity <- list()
meansubj <- list()
meanactivity <- list()
for(i in 1:79){
meanactivity[i] <- list(tapply(dta[,i], dta$activity, mean))
}
meanactivity
meansubj <- list()
for(i in 1:79){
meansubj[i] <- list(tapply(dta[,i], dta$subject, mean))
}
meansubj
tidy2 <- list(meanactivity, meansubj)
?list
is.list(tidy2)
^;
^L
^L
^l
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
swirl()
?sample
sample(1:6, 4, replace = T)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = F)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnomr(10, mean = 100, sd = 25)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(Cars)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
points?
sfw
?points
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
bye()
swirl()
